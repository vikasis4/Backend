{"ast":null,"code":"import _objectSpread from \"/root/rankboost/deployment/website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/root/rankboost/deployment/website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useEffect, forwardRef, useState, useImperativeHandle, createElement } from 'react';\n\nvar noop = function noop() {};\n\nfunction useInterval(callback, delay, immediate) {\n  var savedCallback = useRef(noop);\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n  useEffect(function () {\n    if (delay === null || delay === false) return undefined;\n\n    var tick = function tick() {\n      return savedCallback.current();\n    };\n\n    var id = setInterval(tick, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar LoadingBar = forwardRef(function (_ref, ref) {\n  var progress = _ref.progress,\n      _ref$height = _ref.height,\n      _height = _ref$height === void 0 ? 2 : _ref$height,\n      _ref$className = _ref.className,\n      _className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$color = _ref.color,\n      _color = _ref$color === void 0 ? 'red' : _ref$color,\n      _ref$background = _ref.background,\n      _background = _ref$background === void 0 ? 'transparent' : _ref$background,\n      onLoaderFinished = _ref.onLoaderFinished,\n      _ref$transitionTime = _ref.transitionTime,\n      _transitionTime = _ref$transitionTime === void 0 ? 300 : _ref$transitionTime,\n      _ref$loaderSpeed = _ref.loaderSpeed,\n      _loaderSpeed = _ref$loaderSpeed === void 0 ? 500 : _ref$loaderSpeed,\n      _ref$waitingTime = _ref.waitingTime,\n      _waitingTime = _ref$waitingTime === void 0 ? 1000 : _ref$waitingTime,\n      _ref$shadow = _ref.shadow,\n      _shadow = _ref$shadow === void 0 ? true : _ref$shadow,\n      _ref$containerStyle = _ref.containerStyle,\n      _containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,\n      _ref$style = _ref.style,\n      _style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$shadowStyle = _ref.shadowStyle,\n      shadowStyleProp = _ref$shadowStyle === void 0 ? {} : _ref$shadowStyle,\n      _ref$containerClassNa = _ref.containerClassName,\n      _containerClassName = _ref$containerClassNa === void 0 ? '' : _ref$containerClassNa;\n\n  var isMounted = useRef(false);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      localProgress = _useState2[0],\n      localProgressSet = _useState2[1];\n\n  var _useState3 = useState({\n    active: false,\n    startingValue: 20,\n    refreshRate: 1000\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressedContinuous = _useState4[0],\n      setPressedContinuous = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usingProps = _useState6[0],\n      setUsingProps = _useState6[1];\n\n  var _useState7 = useState({\n    active: false,\n    value: 20\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      pressedStaticStart = _useState8[0],\n      setStaticStartPressed = _useState8[1];\n\n  var initialLoaderStyle = {\n    height: '100%',\n    background: _color,\n    transition: \"all \".concat(_loaderSpeed, \"ms ease\"),\n    width: '0%'\n  };\n  var loaderContainerStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: _height,\n    background: _background,\n    zIndex: 99999999999,\n    width: 100 + '%'\n  };\n  var initialShadowStyles = {\n    boxShadow: \"0 0 10px \".concat(_color, \", 0 0 10px \").concat(_color),\n    width: '5%',\n    opacity: 1,\n    position: 'absolute',\n    height: '100%',\n    transition: \"all \".concat(_loaderSpeed, \"ms ease\"),\n    transform: 'rotate(3deg) translate(0px, -4px)',\n    left: '-10rem'\n  };\n\n  var _useState9 = useState(initialLoaderStyle),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loaderStyle = _useState10[0],\n      loaderStyleSet = _useState10[1];\n\n  var _useState11 = useState(initialShadowStyles),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shadowStyle = _useState12[0],\n      shadowStyleSet = _useState12[1];\n\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      continuousStart: function continuousStart(startingValue) {\n        var refreshRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n        if (pressedStaticStart.active) return;\n\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        var val = startingValue || randomInt(10, 20);\n        setPressedContinuous({\n          active: true,\n          refreshRate: refreshRate,\n          startingValue: startingValue\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      staticStart: function staticStart(startingValue) {\n        if (pressedContinuous.active) return;\n\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        var val = startingValue || randomInt(30, 50);\n        setStaticStartPressed({\n          active: true,\n          value: val\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      complete: function complete() {\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        localProgressSet(100);\n        checkIfFull(100);\n      }\n    };\n  });\n  useEffect(function () {\n    loaderStyleSet(_objectSpread(_objectSpread({}, loaderStyle), {}, {\n      background: _color\n    }));\n    shadowStyleSet(_objectSpread(_objectSpread({}, shadowStyle), {}, {\n      boxShadow: \"0 0 10px \".concat(_color, \", 0 0 5px \").concat(_color)\n    }));\n  }, [_color]);\n  useEffect(function () {\n    if (ref) {\n      if (ref && progress !== undefined) {\n        console.warn('react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.');\n        return;\n      }\n\n      checkIfFull(localProgress);\n      setUsingProps(false);\n    } else {\n      if (progress) checkIfFull(progress);\n      setUsingProps(true);\n    }\n  }, [progress]);\n\n  var checkIfFull = function checkIfFull(_progress) {\n    if (_progress >= 100) {\n      loaderStyleSet(_objectSpread(_objectSpread({}, loaderStyle), {}, {\n        width: '100%'\n      }));\n\n      if (_shadow) {\n        shadowStyleSet(_objectSpread(_objectSpread({}, shadowStyle), {}, {\n          left: _progress - 10 + '%'\n        }));\n      }\n\n      setTimeout(function () {\n        if (!isMounted.current) {\n          return;\n        }\n\n        loaderStyleSet(_objectSpread(_objectSpread({}, loaderStyle), {}, {\n          opacity: 0,\n          width: '100%',\n          transition: \"all \".concat(_transitionTime, \"ms ease-out\"),\n          color: _color\n        }));\n        setTimeout(function () {\n          if (!isMounted.current) {\n            return;\n          }\n\n          if (pressedContinuous.active) {\n            setPressedContinuous(_objectSpread(_objectSpread({}, pressedContinuous), {}, {\n              active: false\n            }));\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (pressedStaticStart.active) {\n            setStaticStartPressed(_objectSpread(_objectSpread({}, pressedStaticStart), {}, {\n              active: false\n            }));\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (onLoaderFinished) onLoaderFinished();\n          localProgressSet(0);\n          checkIfFull(0);\n        }, _transitionTime);\n      }, _waitingTime);\n    } else {\n      loaderStyleSet(function (_loaderStyle) {\n        return _objectSpread(_objectSpread({}, _loaderStyle), {}, {\n          width: _progress + '%',\n          opacity: 1,\n          transition: _progress > 0 ? \"all \".concat(_loaderSpeed, \"ms ease\") : ''\n        });\n      });\n\n      if (_shadow) {\n        shadowStyleSet(_objectSpread(_objectSpread({}, shadowStyle), {}, {\n          left: _progress - 5.5 + '%',\n          transition: _progress > 0 ? \"all \".concat(_loaderSpeed, \"ms ease\") : ''\n        }));\n      }\n    }\n  };\n\n  useInterval(function () {\n    var random = randomInt(10, 20);\n\n    if (localProgress + random < 90) {\n      localProgressSet(localProgress + random);\n      checkIfFull(localProgress + random);\n    }\n  }, pressedContinuous.active ? pressedContinuous.refreshRate : null);\n  return createElement(\"div\", {\n    className: _containerClassName,\n    style: _objectSpread(_objectSpread({}, loaderContainerStyle), _containerStyle)\n  }, createElement(\"div\", {\n    className: _className,\n    style: _objectSpread(_objectSpread({}, loaderStyle), _style)\n  }, _shadow ? createElement(\"div\", {\n    style: _objectSpread(_objectSpread({}, shadowStyle), shadowStyleProp)\n  }) : null));\n});\nexport default LoadingBar;","map":{"version":3,"mappings":"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","names":["noop","useInterval","callback","delay","immediate","savedCallback","useRef","useEffect","current","undefined","tick","id","setInterval","clearInterval","randomInt","min","max","Math","floor","random","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","useState","localProgress","localProgressSet","active","startingValue","refreshRate","pressedContinuous","setPressedContinuous","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","initialLoaderStyle","transition","width","loaderContainerStyle","position","top","left","zIndex","initialShadowStyles","boxShadow","opacity","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","_progress","setTimeout","_loaderStyle","React"],"sources":["/root/rankboost/deployment/website/node_modules/react-top-loading-bar/src/useInterval.ts","/root/rankboost/deployment/website/node_modules/react-top-loading-bar/src/utils.ts","/root/rankboost/deployment/website/node_modules/react-top-loading-bar/src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => void\n  className?: string\n  containerClassName?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n  style?: CSSProperties\n  containerStyle?: CSSProperties\n  shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n  continuousStart: (startingValue: number, refreshRate: number) => void\n  staticStart: (startingValue: number) => void\n  complete: () => void;\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n      containerStyle = {},\n      style = {},\n      shadowStyle: shadowStyleProp = {},\n      containerClassName = ''\n    },\n    ref\n  ) => {\n    const isMounted = useRef(false);\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      }\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            if (!isMounted.current) {\n              return;\n            }\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={containerClassName} style={{...loaderContainerStyle, ...containerStyle}}>\n        <div className={className} style={{...loaderStyle, ...style}}>\n          {shadow ? <div style={{...shadowStyle, ...shadowStyleProp}} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport {\n  IProps,\n}\n\nexport default LoadingBar\n"]},"metadata":{},"sourceType":"module"}